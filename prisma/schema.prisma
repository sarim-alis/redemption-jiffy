generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Voucher {
  id                String     @id @default(uuid())
  code              String     @unique
  shopifyOrderId    String
  customerEmail     String
  productTitle      String?
  type              String?
  used              Boolean    @default(false)
  createdAt         DateTime   @default(now())
  emailSent         Boolean    @default(false)
  username          String[]   @default([])
  locationUsed      String[]
  redeemedAt        DateTime[]
  statusUse         Boolean    @default(false)
  status            String?
  expire            DateTime?
  totalPrice        Float?
  remainingBalance  Float?
  cashHistory       Float[]    @default([])
  currency          String?
  afterExpiredPrice Float?
  order             Order      @relation(fields: [shopifyOrderId], references: [shopifyOrderId])
}

model Product {
  id             String   @id @default(cuid())
  shopifyId      String   @unique
  title          String
  description    String?
  vendor         String?
  status         String
  imageUrl       String?
  imageAlt       String?
  totalInventory Int
  categoryId     String?
  categoryName   String?
  type           String?
  createdAt      DateTime @default(now())
  expire         Int?
}

model Order {
  id                String     @id @default(cuid())
  shopifyOrderId    String     @unique
  customerEmail     String?
  customerName      String?
  totalPrice        Float
  remainingBalance  Float?
  cashHistory       Float[]    @default([])
  currency          String
  status            String
  fulfillmentStatus String?
  itemQuantity      Int
  processedAt       DateTime
  lineItems         Json?
  billingAddress    Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  customerId        String?
  locationUsed      String[]
  redeemedAt        DateTime[]
  statusUse         Boolean    @default(false)
  username          String[]   @default([])
  customer          Customer?  @relation("CustomerOrders", fields: [customerId], references: [id])
  vouchers          Voucher[]
}

model Location {
  id        String     @id @default(cuid())
  name      String     @unique
  market    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
}

model Employee {
  id         String   @id @default(cuid())
  username   String   @unique
  email      String?  @unique
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
}

model Customer {
  id        String   @id @default(cuid())
  shopifyId String?  @unique
  firstName String?
  lastName  String?
  email     String?  @unique
  createdAt DateTime @default(now())
  password  String?
  role      String?
  orders    Order[]  @relation("CustomerOrders")
}
